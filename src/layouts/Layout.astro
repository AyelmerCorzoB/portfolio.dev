---
import "@fontsource-variable/onest";
import "../styles/global.css";
import HeaderES from "../components/es/HeaderES.astro";
import HeaderEN from "../components/en/HeaderEN.astro";
import FooterES from "../components/es/Footer.astro";
import FooterEN from "../components/en/Footer.astro";
import Footer from "../components/en/Footer.astro";

interface Props {
  title: string;
  description: string;
}

const { description, title } = Astro.props;
const currentUrl = Astro.url.pathname;
const isSpanish = currentUrl.startsWith('/es');
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <body class="relative text-black dark:text-white">
      <div
      class="absolute top-0 bottom-0 -z-[2] min-h-screen w-full bg-gray-50 dark:bg-gray-950
  bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(255,255,0,0.5),rgba(255,255,255,0.9))]
  dark:bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(255,215,0,0.4),rgba(255,255,255,0))]"
    > 
    </div>  
    {isSpanish ? <HeaderES /> : <HeaderEN />}
    <slot />
    {isSpanish ? <FooterES /> : <FooterEN />}
    <style is:global>
      :root {
        color-scheme: light dark;
      }

      html {
        font-family: "Onest Variable", system-ui, sans-serif;
        scroll-behavior: smooth;
      }

      body {
        color: rgba(17, 17, 17, 0.9);
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        overscroll-behavior: none;
      }

      @media (prefers-reduced-motion: reduce) {
        html {
          scroll-behavior: auto;
        }
      }

      @media (prefers-color-scheme: dark) {
        body {
          color: rgba(255, 255, 255, 0.9);
        }
      }

      #header-nav {
        animation: blur linear both 0.5s;
        animation-timeline: scroll();
        animation-range: 0 500px;
      }

      @keyframes blur {
        to {
          backdrop-filter: blur(20px);
          border-width: 1px;
          border-color: rgba(0, 0, 0);
          padding: 0.25rem 0.75rem;
          display: flex;
          flex-direction: row;
          align-items: center;
          background-color: rgb(229, 229, 229);
          border-radius: 9999px;
        }
      }

      @media (prefers-color-scheme: dark) {
        @keyframes blur {
          from {
            border: 0px;
          }
          to {
            box-shadow:
              0px 5px 50px -5px rgba(0, 0, 0, 0.1),
              0px 0px 0 1px rgba(0, 0, 0, 0.3);
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(20px);
            border-width: 1px;
            border-color: rgba(0, 0, 0);
            padding-left: 0.75rem;
            padding-right: 0.75rem;
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
            display: flex;
            flex-direction: row;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 9999px;
          }
        }
      }
    </style>
    <script>
      // Función para cambiar entre light y dark mode
      const toggleTheme = () => {
        const isDarkMode =
          localStorage.theme === "dark" ||
          (!("theme" in localStorage) &&
            window.matchMedia("(prefers-color-scheme: dark)").matches);

        if (isDarkMode) {
          localStorage.theme = "light";
          document.documentElement.classList.remove("dark");
        } else {
          localStorage.theme = "dark";
          document.documentElement.classList.add("dark");
        }

        // Actualizar el ícono del tema
        updateThemeIcon();
      };

      // Función para actualizar el ícono del tema
      const updateThemeIcon = () => {
        const themeIcon = document.getElementById("theme-icon-path");
        const isDarkMode =
          localStorage.theme === "dark" ||
          (!("theme" in localStorage) &&
            window.matchMedia("(prefers-color-scheme: dark)").matches);

        if (themeIcon) {
          themeIcon.setAttribute(
            "d",
            isDarkMode
              ? "M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" // Ícono de luna (dark mode)
              : "M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" // Ícono de sol (light mode)
          );
        }
      };

      // Verificar el tema al cargar la página
      if (
        localStorage.theme === "dark" ||
        (!("theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      // Actualizar el ícono al cargar la página
      document.addEventListener("astro:page-load", () => {
        updateThemeIcon();

        // Agregar el evento al botón de toggle
        const themeToggleButton = document.getElementById("theme-toggle");
        if (themeToggleButton) {
          themeToggleButton.addEventListener("click", toggleTheme);
        }
      });
    </script>
  </body>
</html>
